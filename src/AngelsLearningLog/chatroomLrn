In NoSQL, model the db to what we see on screen:

ChatRooms (collection)  
    Chatroom1 (document)                <---------- create custom roomID with paired studentIDs**
        ApprovedMessages (collection)   <---------- produces messageID
            Message1_1 (document) 
                from : "angel"          <---------- my student's emailID / userID
                msg : "hiya"            <---------- msg sent from my student
                timestamp : "2020-09-16T19:45:00"
                teacher : "me"          <---------- the teacher's email
            Message1_2 (document)
                from : "maria"
                msg : "hey yourself"
                timestamp : "2020-09-16T19:46:00"
                teacher : "them"
        PendingMessages (collection)
            Message (document)
                from : "angel"
                msg : "foobar"
                timestamp : "2020-09-16T19:49:00"

=======================================================================

ChatRooms (Firestore collection, or Firebase node)  
    Chatroom1 (document)  -------------------- custom roomID from paired uuids
        ApprovedMessages (collection)------------ produces messageID
            Message1_1 (document) 
                approved : true
                read : true
                from : "angel@UK" ---------- my student's emailID / userID
                approved by : tuid
                msg : "hiya"   ---------- msg sent from my student
                timestamp : "2020-09-16T19:45:00"
            Message1_2 (document)
                approved : true
                read : false ------ has the recipient user (angel) read this message yet?
                from : "maria@DE"
                teacher : "them"
                msg : "hey yourself"
                timestamp : "2020-09-16T19:46:00"
            Message1_3 (document)
                approved : false
                from : "angel@UK"
                teacher : "me"
                msg : "first unapproved message"
                timestamp : "2020-09-16T19:49:00"
            Message1_4 (document)
                approved : false
                from : "angel@UK"
                teacher : "me"
                msg : "second unapproved message"
                timestamp : "2020-09-16T20:49:00"
================================================================================

 Way to target: 
 //get all conversations of logged in user with userID "angel@UK"
 db.ChatRooms.Chatroom1.ApprovedMessages.find({uuid: "angel@UK"})

 db.ChatRooms.Chatroom1.ApprovedMessages.find({ messages: { from: 1 } })
 const messageRef = db.collection('rooms').doc(room1)
                                     .collection('messages).doc('message1_1')
================================================================================

**Model ChatRoom ID after participants, i.e. to set up 1-to-1 chats endpoint

export default function Chatroom (toString: uuid1, toString: uuid2){
    let roomName = "";
    if ("uuid1" < "uuid2" ?
        "uuid1" + "_" + "uuid2" : 
        "uuid2" + "_" + "uuid1")
    return roomName
}

// const user1 = "maria@DE"; //uuid of user1*
// const user2 = "angel"; //uuid of user2*
// let roomName = 'chat_'+(user1<user2 ?
//                 user1+'_'+user2 :
//                 user2+'_'+user1);
// console.log(user1+', '+user2+' => '+roomName)
//     "maria@DE", "angel@UK" => "angel_maria@DE"

This orders the uuids lexacographically in a compound key
================================================================================

How to show a list of chat rooms for the current user:

"Chatroom1": {
    "maria@DE":{"angel@UK_maria@DE":true},
    "angel@UK":{"angel@UK_maria@DE":true}
}

    Can hash the combined uuids to make them shorter
===============================================================================

Refs:
https://stackoverflow.com/questions/54008366/how-to-structure-firestore-database-in-chat-app
https://stackoverflow.com/questions/33540479/best-way-to-manage-chat-channels-in-firebase